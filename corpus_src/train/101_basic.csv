question,answer
"define a variable sender_address that contains the caller address of the contract","
```
    use starknet::get_caller_address;
    use starknet::ContractAddress;
    
    fn main {
        let sender_address = get_caller_address();
    }
```
"
"
Please comment this code:

    use starknet::get_caller_address;
    use starknet::ContractAddress;
    
    fn main {
        let caller_address = get_caller_address();
    }
","
Sure, there you go:

```
// Core Library imports
// These are syscalls and functionalities that allow you to write Starknet contracts
use starknet::get_caller_address;
use starknet::ContractAddress;

fn main {
    // Reading caller address
    let caller_address = get_caller_address();
    }
```
"
"
Write a contract that receives a secret value through the constructor and stores it. Add a function to read the value.
write explanatory comments.
","
```
#[contract]
mod storage_contract {
    // Core Library imports
    // These are syscalls and functionalities that allow you to write Starknet contracts
    use starknet::get_caller_address;
    use starknet::ContractAddress;

    #[storage]
    struct Storage {
        // This variable is a u128, an unsigned integer (only positive values) stored over 128 bits
        // You can read and write to storage variables using the ::write() and ::read() functions, for example: my_secret_value_storage::write(42)
        my_secret_value_storage: u128,
    }

    // View Functions
    
    // Public variables should be declared explicitly with a getter function (indicated with #[view]) to be visible through the ABI and callable from other contracts
    #[view]
    fn my_secret_value() -> u128 {
        // The contract read the value with ::read()
        // You may have noticed that in Cairo 1 all lines end with a semicolon.
        // But this one doesn't. Why?
        // Because, in this case, the return value is the result of the function call. The semicolon is not needed.
        self.my_secret_value_storage::read()
    }

    // Constructor
    
    // This function (indicated with #[constructor]) is called when the contract is deployed and is used to initialize the contract's state
    #[constructor]
    fn constructor(
        my_secret_value: u128,
    ) {
        self.my_secret_value_storage::write(my_secret_value);
    }

}
```
"
"Write an empty contract that stores a u64 value","
```
#[contract]
mod storage_contract {

    #[storage]
    struct Storage {
        // This variable is a u128, an unsigned integer (only positive values) stored over 64 bits
        // You can read and write to storage variables using the ::write() and ::read() functions
        my_value: u164
    }
    #[external(v0)]
    fn set(ref self: ContractState, x: u128) {
        self.my_value.write(x);
    }
    fn get(self: @ContractState) -> u128 {
        self.my_value.read()
    }
    
}
```
"